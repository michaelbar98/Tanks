package edu.brown.cs.bdGaMbPp.Collect;

/**
 * List of ordered nodes that represent shortest path generated by Dijkstra.
 *
 * @author prithudasgupta
 *
 * @param <V>
 *          type of nodes in graph
 * @param <E>
 *          type of edges in graph
 */
public class PathNode<V, E> {

  private V source;
  private V destination;
  private E edge;

  /**
   * Takes in the source, destination, and route of one node in path.
   *
   * @param theSource
   *          source of the current pathNode
   * @param theDestination
   *          destination of the current pathNode
   * @param theEdge
   *          edge between nodes of current pathNode
   */
  public PathNode(V theSource, V theDestination, E theEdge) {
    source = theSource;
    destination = theDestination;
    edge = theEdge;
  }

  /**
   * Gets source node of pathNode.
   *
   * @return Source node of pathNode
   */
  public V getSource() {
    return source;
  }

  /**
   * Gets destination node of pathNode.
   *
   * @return Destination node of pathNode
   */
  public V getDestination() {
    return destination;
  }

  /**
   * Gets edge of pathNode.
   *
   * @return edge of pathNode
   */
  public E getEdge() {
    return edge;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(getSource().toString());
    sb.append(" -> ");
    sb.append(getDestination().toString());
    sb.append(" : ");
    sb.append(getEdge().toString());
    return sb.toString();
  }

}
